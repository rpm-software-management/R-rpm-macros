# Macros to replace overly complicated references to CRAN URLs and source files.
# %cran_source -
#   Expands to the CRAN URL for a package
#   Accepts zero to three arguments:
#   1:  The CRAN version, defaulting to %version.
#   2:  The CRAN project name, defaulting to %packname if it is defined.
#       If not, R- will be stripped from %name and %packname defined to that.
#   3:  The file extension, defaulting to %__r_default_extension (tar.gz).
#   Requires %__cran_package_url_template and %__r_default_extension to be defined.
#   %__cran_package_url_template will undergo substitution (case-sensitive):
#   *  "PACKNAME" will be replaced with the above CRAN project name.
#   *  "PACKVERSION" will be replaced with the above CRAN version.
#   *  "EXTENSION" will be replaced with the above extension.
#
# %cran_url -
#   Expands to the CRAN URL for a package
#   Accepts zero or one arguments:
#   1:  The CRAN project name, defaulting to %packname if it is defined.
#       If not, R- will be stripped from %name and %packname defined to that.
#   Requires %__cran_project_url_template to be defined.
#   %__cran_project_url_template will undergo substitution (case-sensitive):
#   *  "PACKNAME" will be replaced with the above CRAN project name.

%__cran_project_url_template https://cran.r-project.org/package=PACKNAME
%__cran_package_url_template %{__cran_project_url_template}&version=PACKVERSION#/PACKNAME_PACKVERSION.EXTENSION

%__bioc_project_url_base     https://bioconductor.org/packages/release/bioc
%__bioc_project_url_template %{__bioc_project_url_base}/html/PACKNAME.html
%__bioc_package_url_template %{__bioc_project_url_base}/src/contrib/PACKNAME_PACKVERSION.EXTENSION

%__r_default_extension tar.gz

%__r_packname %{lua:
    -- try %packname, then %name with 'R-' stripped
    local src = rpm.expand('%packname')
\
    if src == '%packname' then
        src = string.gsub(rpm.expand('%name'), "^R%-", "")
    end
\
    print(src)
}

%cran_source() %{lua:
    local ver = rpm.expand('%1')
    local src = rpm.expand('%2')
    local ext = rpm.expand('%3')
    local url = rpm.expand('%__cran_package_url_template')
\
    -- If no first argument, use %version
    if ver == '%1' then
        ver = rpm.expand('%version')
    end
\
    -- If no second argument, use %__r_packname
    if src == '%2' then
        src = rpm.expand('%__r_packname')
    end
\
    -- If no third argument, use the preset default extension
    if ext == '%3' then
        ext = rpm.expand('%__r_default_extension')
    end
\
    -- Now substitute in all the values
    url = string.gsub(url, "PACKNAME", src)
    url = string.gsub(url, "PACKVERSION", ver)
    url = string.gsub(url, "EXTENSION", ext)
\
    print(url)
}

%bioc_source() %{lua:
    local ver = rpm.expand('%1')
    local src = rpm.expand('%2')
    local ext = rpm.expand('%3')
    local url = rpm.expand('%__bioc_package_url_template')
\
    -- If no first argument, use %version
    if ver == '%1' then
        ver = rpm.expand('%version')
    end
\
    -- If no second argument, use %__r_packname
    if src == '%2' then
        src = rpm.expand('%__r_packname')
    end
\
    -- If no third argument, use the preset default extension
    if ext == '%3' then
        ext = rpm.expand('%__r_default_extension')
    end
\
    -- Now substitute in all the values
    url = string.gsub(url, "PACKNAME", src)
    url = string.gsub(url, "PACKVERSION", ver)
    url = string.gsub(url, "EXTENSION", ext)
\
    print(url)
}

%cran_url() %{lua:
    local src = rpm.expand('%1')
    local url = rpm.expand('%__cran_project_url_template')
\
    -- If no first argument, try %__r_packname
    if src == '%1' then
        src = rpm.expand('%__r_packname')
    end
\
    -- Substitute in the package name
    url = string.gsub(url, "PACKNAME", src)
\
    print(url)
}

%bioc_url() %{lua:
    local src = rpm.expand('%1')
    local url = rpm.expand('%__bioc_project_url_template')
\
    -- If no first argument, try %__r_packname
    if src == '%1' then
        src = rpm.expand('%__r_packname')
    end
\
    -- Substitute in the package name
    url = string.gsub(url, "PACKNAME", src)
\
    print(url)
}

# The basic sections

%r_prep %{lua:\
    local packname = rpm.expand('%__r_packname')
    local autosetup = rpm.expand("%{autosetup -c -n " .. packname .. "}")
\
    print(autosetup .. "\\\n")
}

%r_install %{lua:\
    local rlibdir = rpm.expand('%rlibdir')
    local bindir = rpm.expand('%_bindir')
    local packname = rpm.expand('%__r_packname')
    local buildroot = rpm.expand('%buildroot')
\
    -- A function to simplify conditionally adding to the file list
    local function add_file(file, type)
        if (file ~= nil) then
            print("[[ -e " .. buildroot .. rlibdir .. "/" .. packname .. "/" .. file .. " ]] && ")
        end
        print("echo '")
        if (type ~= nil) then
            print("%" .. type .. " ")
        end
        print(rlibdir .. "/" .. packname)
        if (file ~= nil) then
            print("/" .. file)
        end
        print("' >> " .. packname .. ".files\\\n")
    end
\
    print("mkdir -p " .. buildroot .. rlibdir .. "\\\n")
    print(bindir .. "/R CMD INSTALL -l " .. buildroot .. rlibdir .. " " .. packname .. "\\\n")
    print("test -d " .. packname .. "/src && (cd " .. packname .. "/src; rm -f *.o *.so)\\\n")
    print("rm -f " .. buildroot .. rlibdir .. "/R.css\\\n")
\
    -- R packages have a somewhat regularlized file structure
    -- This could be pushed out to a shell script and called like %find_lang is
    -- called.  But for now we'll just inline the code.
    -- print("\\\n# Generate a default file list\\\n")
    -- add_file(nil, "dir")
    -- add_file("html/", "doc")
    -- add_file("libs", "dir")
    -- add_file("libs/" .. packname .. ".so")
    -- add_file("DESCRIPTION")
    -- add_file("COPYING", "license")
    -- add_file("LICENSE", "license")
    -- add_file("NEWS", "doc")
    -- add_file("INDEX")
    -- add_file("NAMESPACE")
    -- add_file("Meta/")
    -- add_file("R/")
    -- add_file("help/")
\
    -- print("ls -lR " .. buildroot .. "\\\n")
}

%r_check %{lua:\
    local bindir = rpm.expand('%_bindir')
    local packname = rpm.expand('%__r_packname')
\
    print("export LANG=C.UTF-8\\\n")
    print("export _R_CHECK_FORCE_SUGGESTS_=0\\\n")
    print(bindir .. "/R CMD check " .. packname .. " --ignore-vignettes\\\n")
}

%r_noarch_package %{lua:\
    rpm.define("rlibdir  %{_datadir}/R/library")
    print("BuildArch: noarch\\\n")
    print("BuildRequires: R-devel tex(latex)\\\n")
}

%r_archful_package %{lua:\
    rpm.define("rlibdir  %{_libdir}/R/library")
    print("BuildRequires: R-devel tex(latex)\\\n")
}
